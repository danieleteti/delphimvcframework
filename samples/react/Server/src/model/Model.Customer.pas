unit Model.Customer;

interface

uses  MVCFramework.ActiveRecord;

type
  [MVCTable('customers')]
  TCustomer = class(TMVCActiveRecord)
  private
    [MVCTableField('id', [foPrimaryKey, foAutoGenerated])]
    Fid: Integer;
    [MVCTableField('note')]
    FNote: String;
    [MVCTableField('code')]
    FCode: String;
    [MVCTableField('rating')]
    Frating: Integer;
    [MVCTableField('description')]
    FDescription: String;
    [MVCTableField('city')]
    FCity: String;
    procedure SetCity(const Value: String);
    procedure SetCode(const Value: String);
    procedure SetDescription(const Value: String);
    procedure Setid(const Value: Integer);
    procedure SetNote(const Value: String);
    procedure Setrating(const Value: Integer);
  public
    constructor Create;override;
    destructor Destroy;override;

    property id : Integer read Fid write Setid;
    property Code : String read FCode write SetCode;
    property Description : String read FDescription write SetDescription;
    property City : String read FCity write SetCity;
    property Note : String read FNote write SetNote;
    property rating : Integer read Frating write Setrating;

  end;

implementation

{ TCustomer }

constructor TCustomer.Create;
begin
  inherited Create;

end;

destructor TCustomer.Destroy;
begin

  inherited;
end;

procedure TCustomer.SetCity(const Value: String);
begin
  FCity := Value;
end;

procedure TCustomer.SetCode(const Value: String);
begin
  FCode := Value;
end;

procedure TCustomer.SetDescription(const Value: String);
begin
  FDescription := Value;
end;

procedure TCustomer.Setid(const Value: Integer);
begin
  Fid := Value;
end;

procedure TCustomer.SetNote(const Value: String);
begin
  FNote := Value;
end;

procedure TCustomer.Setrating(const Value: Integer);
begin
  Frating := Value;
end;

end.
